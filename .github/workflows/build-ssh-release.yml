name: Build ssh releases

on:
  workflow_dispatch:
    inputs:
      device:
        description: 'Select device to build'
        required: true
        default: 'x86_64'
        type: choice
        options:
          - 'armv8'
          - 'nanopi-r4s'
          - 'nanopi-r5s'
          - 'netgear_r8500'
          - 'x86_64'
      build_options:
        description: 'Build options (separate multiple options with spaces)'
        required: false
        default: 'BUILD_FAST=y ENABLE_BPF=y ENABLE_LTO=y ENABLE_LRNG=y ENABLE_MOLD=y KERNEL_CLANG_LTO=y USE_GCC14=y'
        type: string
      ssh:
        type: choice
        description: 'SSH connection to Actions'
        options:
        - 'false' 
        - 'true'
        default: 'false'
        required: true
        

env:
  UPLOAD_RELEASE: true

jobs:
  build:
    name: Build ${{ github.event.inputs.device }}
    runs-on: ubuntu-24.04
    defaults:
      run:
        shell: bash

    steps:
    - name: Setup variables
      run: |
        sudo timedatectl set-timezone 'Asia/Shanghai'
        git config --global user.name 'actions'
        git config --global user.email 'action@github.com'
        echo WORKDIR="/builder" >> "$GITHUB_ENV"

    - name: Show system
      run: |
        echo -e "\n\e[1;32mCPU:\e[0m"
        echo "$(grep 'model name' /proc/cpuinfo | head -1 | awk -F ': ' '{print $2}') ($(grep 'cpu MHz' /proc/cpuinfo | head -1 | awk -F ': ' '{print $2}')MHz) x $(grep processor /proc/cpuinfo  | wc -l)"
        echo -e "\n\e[1;32mMemory:\e[0m"
        free -h
        echo -e "\n\e[1;32mStorage:\e[0m"
        df -Th / /mnt
        echo -e "\n\e[1;32mSystem:\e[0m"
        lsb_release -a
        echo -e "\n\e[1;32mKernel:\e[0m"
        uname -a
        echo

    - name: Free disk space
      uses: sbwml/actions@free-disk
      with:
        build-mount-path: /builder

    - name: Build System Setup
      uses: sbwml/actions@openwrt-build-setup

    - name: Compile OpenWrt
      working-directory: /builder
      id: compile
      continue-on-error: true
      run: |
        export GITHUB_REPO=${{ github.repository }}
        export ${{ github.event.inputs.build_options }}
        bash <(curl -sS https://raw.githubusercontent.com/${{ github.repository }}/master/openwrt/build-ssh.sh) rc2 ${{ github.event.inputs.device }}
        pwd
        ls -la
        cd openwrt
        tags=$(git describe --abbrev=0 --tags)
        echo "latest_release=$tags" >>$GITHUB_ENV

    # ----------------------------------------------------------------
    - name: 确认工作目录,转到openwrt目录下，为ssh连接创造条件
      run: |
        pwd
        ls -la
        cd openwrt
        ls -la
        cd /home/runner/work/sbwml-r4s_build_script/sbwml-r4s_build_script/openwrt
        ls -la
        mkdir -m 755 /home/runner/work/sbwml-r4s_build_script/sbwml-r4s_build_script/openwrt/.ssh
    
    - name: SSH 连接到 Actions
      uses: P3TERX/ssh2actions@main
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}

    - name: 停止云编译
      run: |
          exit 1

    # ----------------------------------------------------------------

    - name: Extensive logs after a failed compilation
      working-directory: /builder
      if: steps.compile.outcome == 'failure'
      run: |
        cd openwrt
        make V=s

    - name: Prepare Firmware Files
      working-directory: /builder
      run: |
        pwd
        ls -la
        mkdir -p rom info
        ls -la
        if [ "${{ github.event.inputs.device }}" = "nanopi-r4s" ]; then
          cp -a openwrt/bin/targets/rockchip/*/*.img.gz rom/
          cp -a openwrt/bin/targets/rockchip/*/*-r4s.manifest info/manifest.txt
          cp -a openwrt/bin/targets/rockchip/*/config.buildinfo info/config.buildinfo
          cd rom && sha256sum *gz > ../info/sha256sums.txt
        elif [ "${{ github.event.inputs.device }}" = "nanopi-r5s" ]; then
          cp -a openwrt/bin/targets/rockchip/*/*.img.gz rom/
          cp -a openwrt/bin/targets/rockchip/*/*.manifest info/manifest.txt
          cp -a openwrt/bin/targets/rockchip/*/config.buildinfo info/config.buildinfo
          cd rom && sha256sum *gz > ../info/sha256sums.txt
        elif [ "${{ github.event.inputs.device }}" = "x86_64" ]; then
          #tar -czvf rom/openwrt-x86_64.tar.gz openwrt
          cp -a openwrt/bin/targets/x86/*/*-ext4-combined-efi.img.gz rom/
          cp -a openwrt/bin/targets/x86/*/*-squashfs-combined-efi.img.gz rom/
          cp -a openwrt/bin/targets/x86/*/*-generic-rootfs.tar.gz rom/
          cp -a openwrt/bin/targets/x86/*/*-x86-64-generic.manifest info/manifest.txt
          cp -a openwrt/bin/targets/x86/*/config.buildinfo info/config.buildinfo
          cd rom && sha256sum *gz > ../info/sha256sums.txt
        elif [ "${{ github.event.inputs.device }}" = "armv8" ]; then
          tar zcf rom/u-boot-qemu_armv8.tar.gz -C openwrt/bin/targets/armsr/armv8*/ ./u-boot-qemu_armv8
          cp -a openwrt/bin/targets/armsr/armv8*/*-generic-initramfs-kernel.bin rom/
          cp -a openwrt/bin/targets/armsr/armv8*/*-generic-kernel.bin rom/
          cp -a openwrt/bin/targets/armsr/armv8*/*-generic-ext4-combined-efi.img.gz rom/
          cp -a openwrt/bin/targets/armsr/armv8*/*-generic-squashfs-combined-efi.img.gz rom/
          cp -a openwrt/bin/targets/armsr/armv8*/*-rootfs.tar.gz rom/
          cp -a openwrt/bin/targets/armsr/armv8*/*.manifest info/manifest.txt
          cp -a openwrt/bin/targets/armsr/armv8*/config.buildinfo info/config.buildinfo
          cd rom && sha256sum * > ../info/sha256sums.txt
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.event.inputs.device }}-openwrt-${{ env.latest_release }}
        path: ${{ env.WORKDIR }}/rom/*

    #- name: Create release
    #  continue-on-error: true
    #  uses: ncipollo/release-action@v1
    #  with:
    #    name: OpenWrt-${{ env.latest_release }}
    #    allowUpdates: true
     #   tag: ${{ env.latest_release }}
    #    commit: master
     #   replacesArtifacts: true
     #   token: ${{ secrets.REPO_TOKEN }}
     #   artifacts: ${{ env.WORKDIR }}/rom/*

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        [ ${UPLOAD_GOFILE} = true && ${{ steps.gofile.outputs.url }} ] && echo "🔗 [GoFile](${{ steps.gofile.outputs.url }})" >> release.txt
       # echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      continue-on-error: true
      uses: softprops/action-gh-release@master
      #if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
      with:
        tag_name: ${{ env.latest_release }}
        body_path: release.txt
        files: ${{ env.WORKDIR }}/rom/*
        body: |
            ### 📒 编译固件信息
            - 💻 平台架构: ${{ github.event.inputs.device }}                                                                 
            - 🌐 默认地址: 10.0.0.1
            - 🔑 默认密码: 空           
